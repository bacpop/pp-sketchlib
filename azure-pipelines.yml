# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python38:
      python.version: '3.8'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- checkout: self
  submodules: true
  displayName: 'Checkout submodules'

- bash: echo "##vso[task.prependpath]$CONDA/bin"
  displayName: Add conda to PATH

- script: |
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
    sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
    sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
    sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
    sudo apt-get update
    sudo apt-get -y install cuda
  displayName: Install nvcc

- bash: conda env create --quiet --file environment.yml
  displayName: Create Anaconda environment and install dependencies

# to add C++ tests add the following line, and remove --no-cpp
# pushd src && make && make install && popd
- script: |
    source activate pp_env
    export PATH=/usr/local/cuda-11.2/bin${PATH:+:${PATH}}
    export LD_LIBRARY_PATH=/usr/local/cuda-11.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
    export SKETCHLIB_INSTALL=azure
    python -m pip install --no-deps --ignore-installed .
  displayName: 'Build & install (setup.py)'

- script: |
    source activate pp_env
    export SKETCHLIB_INSTALL=azure
    python -m pip install --no-deps --ignore-installed .
    cd test && python run_test.py --no-cpp
  displayName: 'Run tests (run_test.py)'
